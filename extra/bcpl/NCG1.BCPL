// NCG1.BCPL 05/23/68 11:58

get 'NHEAD3'

let Readop() = valof
      $(1 let LvCh = lv Ch
          let S = vec 100
          let T(S) = valof
                $(2 let i, j = 0, 3
                    $( unless WordV*(i)=S*(i) resultis false
                       if j ge Vp resultis true
                       i, j := i+1, j+4  $) repeat  $)2

          Readch(INPUT, LvCh) repeatwhile Ch le '*s'
          S*(1) := Ch
          Vp := 1
          Readch(INPUT, LvCh)

          $( Vp := Vp + 1
             S*(Vp) := Ch
             Readch(INPUT, LvCh)  $) repeatwhile 'A' le Ch le 'Z'

          S*(0) := Vp
          Packstring(S, WordV)

          switchon S*(1) into

       $( default: if Ch=Endofstreamch resultis END
                   resultis ERROR

          case 'D':
          resultis  T('DATALAB') -* DATALAB,
                    T('DIV') -* DIV, ERROR

          case 'E':
          resultis  T('EQ') -* EQ,
                    T('EQV') -* EQV,
                    T('END') -* END, ERROR

          case 'F':
          resultis  T('FNAP') -* FNAP,
                    T('FNRN') -* FNRN,
                    T('FALSE') -* FALSE,
                    T('FINISH') -* FINISH, ERROR

          case 'G':
          resultis  T('GOTO') -* GOTO,
                    T('GE') -* GE,
                    T('GR') -* GR,
                    T('GLOBAL') -* GLOBAL, ERROR

          case 'I':
          resultis  T('ITEML') -* ITEML,
                    T('ITEMN') -* ITEMN, ERROR

          case 'J':
          resultis  T('JUMP') -* JUMP,
                    T('JF') -* JF,
                    T('JT') -* JT, ERROR

          case 'L':
          if Vp=2 do
                 switchon S*(2) into
                 $( default:  resultis ERROR
                    case 'E': resultis LE
                    case 'N': resultis LN
                    case 'G': resultis LG
                    case 'P': resultis LP
                    case 'L': resultis LL
                    case 'S': resultis LS  $)

          resultis  T('LAB') -* LAB,
                    T('LLG') -* LLG,
                    T('LLL') -* LLL,
                    T('LLP') -* LLP,
                    T('LOGAND') -* LOGAND,
                    T('LOGOR') -* LOGOR,
                    T('LSHIFT') -* LSHIFT,
                    T('LSTR') -* LSTR, ERROR

          case 'M':
          resultis  T('MINUS') -* MINUS,
                    T('MULT') -* MULT, ERROR

          case 'N':
          resultis  T('NE') -* NE,
                    T('NEG') -* NEG,
                    T('NEQV') -* NEQV,
                    T('NOT') -* NOT, ERROR

          case 'P':
          resultis  T('PLUS') -* PLUS, ERROR

          case 'R':
          resultis  T('RES') -* RES,
                    T('REM') -* REM,
                    T('RTAP') -* RTAP,
                    T('RTRN') -* RTRN,
                    T('RSHIFT') -* RSHIFT,
                    T('RSTACK') -* RSTACK,
                    T('RV') -* RV, ERROR

          case 'S':
          resultis  T('SG') -* SG,
                    T('SP') -* SP,
                    T('SL') -* SL,
                    T('STIND') -* STIND,
                    T('STACK') -* STACK,
                    T('SAVE') -* SAVE,
                    T('SWITCHON') -* SWITCHON,
                    T('STORE') -* STORE, ERROR

          case 'T':
          resultis  T('TRUE') -* TRUE, ERROR

                                                 $)1

and ReadN() = valof
      $(1 let Ch, A, Neg = 0, 0, false

          let LvCh = lv Ch
          Readch(INPUT, LvCh) repeatwhile Ch le '*s'
          if Ch='-' do $( Neg := true; Readch(INPUT, LvCh)  $)

          while '0' le Ch le '9' do
                    $( A := A * 10 + Ch - '0'
                       Readch(INPUT, LvCh)  $)
          resultis Neg -* -A, A  $)1

and ReadL() = valof
       $( let Ch, A = 0, 0
          let LvCh = lv Ch
          Readch(INPUT, LvCh) repeatwhile Ch le '*s'

          unless Ch='L' do Report(302)

          Readch(INPUT, LvCh)
          while '0' le Ch le '9' do
                    $( A := A * 10 + Ch - '0'
                       Readch(INPUT, LvCh)  $)
          resultis A  $)



