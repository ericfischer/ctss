// PLIST.BCPL 02/13/10:10
// with hand written corrections

get ' HEAD1'

let Plist(x, n, d) be
      $(1 let Size = 0
          if x=0 do $( WriteS( 'Nil' )
                       return  $)
          switchon H1*(x) into
       $( case NUMBER: WriteS( '** Number ')
                       WriteN(H2*(x))
                       return

          case NAME: WriteS( '** NAME ' )
                     WriteS(x+2)
                     return

          case STRINGCONST: WriteS( '** String ')
                            WriteS(x+1)
                            return

          case FOR: Size := Size + 1

          case COND:case FNDEF:case RTDEF:
          case TEST:case CONSTDEF:
                    Size := Size + 1

          case VECAP:case FNAP:
          case MULT:case DIV:case REM:case PLUS:case MINUS:
          case EQ:case NE:case GR:case GE:case LS:case LE:
          case LSHIFT:case RSHIFT:case LOGAND:case LOGOR:
          case EQV:case NEQV:case COMMA:
          case AND:case VALDEF:case VECDEF:
          case ASS:case RTAP:case COLON:case IF:case UNLESS:
          case WHILE:case UNTIL:case REPEATWHILE:case REPEATUNTIL:
          case SWITCHON:case CASE:case SEQ:case LET:
          case MANIFEST:case GLOBAL:
                    Size := Size + 1

          case VALOF:case LV:case RV:case NEG:case NOT:case REL:
          case TABLE:
          case GOTO:case RESULTIS:case REPEAT:
                    Size := Size + 1

          case TRUE:case FALSE:case BREAK: case RETURN:case FINISH:
                    Size := Size + 1

                    if n=d do $( WriteS( 'Etc' )
                                 return $)

                    WriteS( 'Op ' )
                    WriteN(H1*(x))
                    for i = 2 to Size do
                            $( Writech(OUTPUT, '*n')
                               for j=0 to n do WriteS( '. ' )
                               Plist(H1*(x+i-1), n+1, d)  $)
                    return    $)1

