           EXTERNAL FUNCTION (BUFF)
           E'O LDABS.
           E'O FIRST.
          R
          R     NEW 'LDABS' COMMAND  02/14/65
          R          D.R. WIDRIG
          R
          R     LOADING INSTRUCTIONS
          R          FAP (MAIN) (LIST)
          R          MAD LDBS (LIST)
          R          FAP CKSUM (LIST)
          R          NCLOAD (MAIN) LDBS CKSUM (LIBE) XLIBE
          R          SAVE LDABS
          R
           N'R
           B'N TCD, CKSUM.
           D'N CARD(28),BUFFR(864),BUFFR1(864)
           E'E (BUFFR(1),BUFFR1(0))
          R
           V'S DUMMY(1)...DUMMY(36) = 0
           V'S DEND(125) = 234644000174K,0,0,464763000002K,0
           V'S DEND(1)...DEND(124) = 0
          R
           V'S MESS1 = $CORRECT FORMAT IS   LDABS NAME1 -NAME2-$,
          1     777777777777K
           V'S MESS15 = $IF NAME2 SPECIFIED, THEN 'NAME2 SAVED' CREATED$
          1     ,777777777777K
           V'S MESS2 = $ CARD $,0,$ OUT OF BOUND$,777777777777K
           V'S MESS3 = $ CARD $,0,$ ILLEGAL BINARY CARD$,777777777777K
           V'S MESS4 = $CHECK SUM ERROR IN CARD$,0,777777777777K
           V'S MESS5 = $TRANSFER CARD MISSING, TYPE OCTAL STARTING LOC,$
          1     ,377777777777K
          R
           V'S FENCE = 777777777777K
           V'S UBD = 100000K
           V'S TCD = 0B
           V'S R = 864
           V'S MODE = 1
           V'S LO = 0
           V'S M = 35
           V'S STUFF = 128
           V'S TOP = 0
           V'S N2 = 774324212262K,$ SAVED$
           E'E (N2(1),S)
           V'S A = $   ABS$
          R
          R     INTERNAL FUNCTION FOR PRODUCING FRAMES
          R
           INTERNAL FUNCTION (A)
           E'O FRAME.
                WRWAIT.(N2,S,LO+M2,BUFFR(R)...R)
                T'H FLOOP1, FOR I = 0,2,(I.G.R)
                     BUFFR(I) = 0
                     BUFFR1(I) = 0
FLOOP1          C'E
                LO = A
                HI = LO + R
                RDWAIT.(N2,S,LO+M2,BUFFR(R)...R)
                F'N
           E'N
          R
          R     ROUTINE TO MOVE WORDS INTO FRAME
          R
           INTERNAL FUNCTION (A)
           E'O MOVE.
                INDX = R - LOC + LO
                T'H MLOOP1, FOR I = 0,1,(I.GE.A)
                     BUFFR(INDX-I) = CARD(PTR-I)
MLOOP1          C'E
                PTR = PTR - I
                F'N
           E'N
          R
          R     GET FIRST ARGUMENT AND CHECK IT
          R
           W'R COMARG.(1,N1) .E. FENCE
                PRNTP.(MESS1)
                PRNTP.(MESS15)
                T'O ERR1
           O'R COMARG.(2,DUMMY) .NE. FENCE
                N2 = DUMMY
                MODE = 0
           E'L
          R
          R     SET UP I/O ERROR RETURNS AND OPEN INPUT FILE
          R     ALSO, SET MEMORY BOUND AND BUFFER POINTERS
          R
           FERRTN.(ERR2)
           BUFF1 = 1K5-GMEM.(DUMMY)
           BUFF2 = BUFF1-432
           BUFF3 = BUFF2-432
           SMEM.(77777K)
           HI = R
           M1 = M + 1
           M2 = M + 2
           BFOPEN.($R$,N1,A,BUFF(BUFF1),BUFF(BUFF2),-0,ERR2)
          R
          R     PREPARE CORE-IMAGE FILE
          R
           W'R DELETE.(N2) .NE. 0, T'O ERR1
           OPEN.($RW$,N2,S,MODE)
           BUFFER.(N2,S,BUFF(BUFF3)...432)
           WRFILE.(N2,S,1,DUMMY(M1)...M1)
          R
          R     READ ONE COLUMN BINARY CARD AND PROCESS
          R
READ       BFREAD.(N1,A,CWD...1,REOF,EOFCT,ERR2)
           LOC = (CWD.A.77777K)
           WDCT = (CWD.A.77K6).RS.18
           WDLOC = WDCT + LOC
           PFX = (CWD.A.7777K8).RS.24
           BFREAD.(N1,A,CARD(27)...27,WHAT,EOFCT,ERR2)
           W'R (WDLOC.G.UBD)
                MESS2(1) = OCABC.(LOC)
                PRNTP.(MESS2)
                T'O READ
           O'R (WDCT.G.22).OR.(PFX.NE.5)
WHAT            MESS3(1) = OCABC.(LOC)
                PRNTP.(MESS3)
                T'O READ
           O'R (WDCT.E.0)
                TCD = 1B
                TLOC = LOC
                T'O REOF
           O'R CKSUM.(CWD,CARD(26),WDCT,CARD(27))
                MESS4(4) = OCABC.(LOC)
                PRNTP.(MESS4)
                T'O READ
           E'L
          R
          R     PREPARE TO INSERT WORDS INTO FRAME
          R
           PTR = 26
           W'R (WDLOC .G. TOP), TOP = WDLOC
          R
          R     SEE IF NEW FRAME IS NEEDED
          R
           W'R (LOC .L. LO)
                FRAME.((LOC/R)*R)
                T'O SPLIT
           E'L
          R
          R     SEE IF FRAME SHOULD BE MOVED UP
          R
UP         W'R (LOC .G. HI)
                FRAME.(LO+R)
                T'O UP
           E'L
          R
          R     CHECK FOR SPLIT FRAMES
          R
SPLIT      W'R (WDLOC .G. HI)
                MOVE.(HI-LOC)
                WDCT = WDLOC - HI
                LOC = HI
                FRAME.(LO+R)
           E'L
           MOVE.(WDCT)
           T'O READ
          R
          R     EOF FROM INPUT, CLOSE UP
          R
REOF       BFCLOS.(N1,A,ERR2)
          R
          R     WRITE OUT LAST FRAME
          R
           WRFILE.(N2,S,LO+M2,BUFFR(R)...R)
          R
          R     CUT BACK FILE
          R
           TRFILE.(N2,S,TOP+M2,TRERR,ERCODE)
          R
          R     FUDGE UP MEMORY BOUND, ETC.
          R
TROK       W'R (TOP .NE. 100000K)
                TOP = TOP + 1
                STUFF = STUFF + 1
           E'L
          R
          R     APPEND DUMMY SAVED FILE STUFF AT END
          R
           CLOSE.(N2,S)
           OPEN.($RW$,N2,S,MODE)
           BUFFER.(N2,S,BUFF(BUFF3)...432)
           WRFILE.(N2,S,0,DEND(STUFF)...STUFF)
          R
          R     CHECK FOR TRANSFER CARD
          R
           W'R .NOT. TCD
                PRNTP.(MESS5)
                RDFLXC.(DUMMY,5)
                TLOC = BCOCT.(RJUST.(DUMMY))
           E'L
          R
          R     INSERT TRANSFER LOCATION AS NEW ILC
          R     ALSO, INSERT MEMORY BOUND WORD
          R
           MEMBND = 3K11 .V. (M.LS.18) .V. (TOP-1)
           WRFILE.(N2,S,1,MEMBND...1)
           WRFILE.(N2,S,2,TLOC...1)
          R
          R     CLOSE SAVED FILE
          R
           CLOSE.(N2,S,ERR2)
          R
          R     NOW PRODUCE CORE IMAGE
          R
           NCOM.($RESTOR$,N2)
          R
          R     ERROR HANDLING
          R
ERR2       PRNTER.
ERR1       BRAKE.
           CHNCOM.(1)
          R
          R     CHECK ERROR FROM TRFILE
          R
TRERR      W'R (ERCODE .E. 7)
                T'O TROK
           O'E
                T'O ERR2
           E'L
          R
           E'N
