// inpp2.bcpl 02/13/68 09:20

get ' HEAD1'
let Lookupword() be
$(1 let Error() be
           $( Report(93)
              for j = 1 to Vp do Writech(MONITOR, V*(j))
              Writech(MONITOR, '*n')
              PPitem(NAME, 11)  $)
    let Is(S) = valof
       $(2 let i, j = 0, 3
           $( unless WordV*(i)=S*(i) resultis false
              if j ge Vp resultis true
              i, j := i+1, j+4  $) repeat    $)2

    V*(0) := Vp
    Packstring(V, WordV)
    switchon V*(1) into
    $( default:   Error(); return

       case 'a':
          test Is('and') then PPitem(AND, 00)
                           or Error()
          return

       case 'b':
          test Is('be') then PPitem(BE, 00) or
          test Is('break') then PPitem(BREAK, 22)
                           or Error()
          return

       case 'c':
          test Is('case') then PPitem(CASE, 20)
                           or Error()
          return

       case 'd':
          test Is('do') then PPitem(DO, 00) or
          test Is('default') then PPitem(DEFAULT, 20)
                           or Error()
          return

       case 'e':
          test Is('eq') then PPitem(EQ, 00) or
          test Is('eqv') then PPitem(EQV, 00)
                           or Error()
          return

       case 'f':
          test Is('false') then PPitem(FALSE, 01) or
          test Is('for') then PPitem(FOR, 20) or
          test Is('finish') then PPitem(FINISH,22)
                           or Error()
          return

       case 'g':
          test Is('goto') then PPitem(GOTO,20) or
          test Is('ge') then PPitem(GE,00) or
          test Is('gr') then PPitem(GR,00) or
          test Is('global') then PPitem(GLOBAL,00) or
          test Is('get')
                    then $( ST := 0
                            Nextsymb()
                            unless Symb=STRINGCONST do
                                        $( Report(97)
                                           return  $)
                         $( let S = vec 256
                            V*(0) := Vp
                            Packstring(V, S)
                            GetV*(GetP) := INPUT
                            GetP := GetP + 1
                            INPUT := Findinput(BCDword(S), BCDword('  BCPL'))
                            NLPending := true
                            Nextsymb()
                            return  $)  $)
                    or Error()
          return

       case 'i':
          test Is('if') then PPitem(IF,20) or
          test Is('into') then PPitem(INTO,00)
                           or Error()
          return

       case 'l':
          test Is('let') then PPitem(LET,00) or
          test Is('lv') then PPitem(LV,00) or
          test Is('le') then PPitem(LE,00) or
          test Is('ls') then PPitem(LS,00) or
          test Is('logor') then PPitem(LOGOR,00) or
          test Is('logand') then PPitem(LOGAND,00) or
          test Is('lshift') then PPitem(LSHIFT,00)
                           or Error()
          return

       case 'm':
          test Is('manifest') then PPitem(MANIFEST,00)
                           or Error()
          return

       case 'n':
          test Is('ne') then PPitem(NE,00) or
          test Is('neqv') then PPitem(NEQV,00) or
          test Is('not') then PPitem(NOT,00)
                           or Error()
          return

       case 'o':
          test Is('or') then PPitem(OR,00)
                           or Error()
          return

       case 'r':
          test Is('resultis') then PPitem(RESULTIS,20) or
          test Is('return') then PPitem(RETURN,22) or
          test Is('rem') then PPitem(REM,00) or
          test Is('rshift') then PPitem(RSHIFT,00) or
          test Is('rv') then PPitem(RV,10) or
          test Is('repeat') then PPitem(REPEAT,02) or
          test Is('repeatwhile') then PPitem(REPEATWHILE,00) or
          test Is('repeatuntil') then PPitem(REPEATUNTIL,00)
                           or Error()
          return

       case 's':
          test Is('switchon') then PPitem(SWITCHON,20)
                                or Error()
          return

       case 't':
          test Is('to') then PPitem(TO,00) or
          test Is('test') then PPitem(TEST,20) or
          test Is('true') then PPitem(TRUE,01) or
          test Is('then') then PPitem(DO,00) or
          test Is('table') then PPitem(TABLE, 00)
                           or Error()
          return

       case 'u':
          test Is('until') then PPitem(UNTIL,20) or
          test Is('unless') then PPitem(UNLESS,20)
                              or Error()
          return

       case 'v':
          test Is('vec') then PPitem(VEC,00) or
          test Is('valof') then PPitem(VALOF,10)
                                          or Error()
          return

       case 'w':
          test Is('while') then PPitem(WHILE,20)
                           or Error()
          return   $)1
