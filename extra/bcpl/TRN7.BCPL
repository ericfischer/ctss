// TRN7.BCPL 06/14/68 17:50

get 'NHEAD2'

let Complab(L) be
          $( Out2P(LAB, L)  $)

and Compdatalab(L) be
          $( Out2P(DATALAB, L)  $)

and Compjump(L) be
          $( Out2P(JUMP,L)
             Outputconsts()  $)

and Outputconsts() be
       $(1 until LabvecS=0 do
                    $( Compdatalab(Labvec*(LabvecS-2))
                       Out2P(ITEML, Labvec*(LabvecS-1))
                       LabvecS := LabvecS - 2  $)1

and Out1(x) be
       $( Writeop(x); Writech(OUTPUT, '*n') $)

and Out2(x, y) be
       $( Writeop(x); Writech(OUTPUT, '*t')
          WriteN(y); Writech(OUTPUT, '*n')  $)

and Out2P(x, y) be
       $( Writeop(x); WriteS('*tL')
          WriteN(y); Writech(OUTPUT, '*n')  $)

and Out3P(x, y, z) be
       $( Writeop(x); Writech(OUTPUT, '*t')
          WriteN(y); WriteS('*tL')
          WriteN(z); Writech(OUTPUT, '*n')  $)

and OutN(x) be
       $( WriteN(x)  $)

and OutL(x) be
       $( WriteS('*tL'); WriteN(x); Writech(OUTPUT, '*n')  $)

and OutC(x) be
       $( WriteN(x)
          Writech(OUTPUT, '*s')  $)

and Writeop(x) be
   $(1 let S = valof
       $( switchon x into
       $( default:  resultis '$ $ $ $ $ $ $ $ $ $'

          case END:            resultis 'END'
          case MULT:           resultis 'MULT'
          case DIV:            resultis 'DIV'
          case REM:            resultis 'REM'
          case PLUS:           resultis 'PLUS'
          case MINUS:          resultis 'MINUS'
          case EQ:             resultis 'EQ'
          case NE:             resultis 'NE'
          case LS:             resultis 'LS'
          case GR:             resultis 'GR'
          case LE:             resultis 'LE'
          case GE:             resultis 'GE'
          case LSHIFT:         resultis 'LSHIFT'
          case RSHIFT:         resultis 'RSHIFT'
          case LOGAND:         resultis 'LOGAND'
          case LOGOR:          resultis 'LOGOR'
          case EQV:            resultis 'EQV'
          case NEQV:           resultis 'NEQV'

          case NEG:            resultis 'NEG'
          case NOT:            resultis 'NOT'
          case RV:             resultis 'RV'

          case TRUE:           resultis 'TRUE'
          case FALSE:          resultis 'FALSE'

          case LP:             resultis 'LP'
          case LG:             resultis 'LG'
          case LN:             resultis 'LN'
          case LSTR:           resultis 'LSTR'
          case LL:             resultis 'LL'

          case LLP:            resultis 'LLP'
          case LLG:            resultis 'LLG'
          case LLL:            resultis 'LLL'

          case SP:             resultis 'SP'
          case SG:             resultis 'SG'
          case SL:             resultis 'SL'
          case STIND:          resultis 'STIND'

          case JUMP:           resultis 'JUMP'
          case JT:             resultis 'JT'
          case JF:             resultis 'JF'
          case GOTO:           resultis 'GOTO'
          case LAB:            resultis 'LAB'
          case STACK:          resultis 'STACK'
          case STORE:          resultis 'STORE'

          case SAVE:           resultis 'SAVE'
          case FNAP:           resultis 'FNAP'
          case FNRN:           resultis 'FNRN'
          case RTAP:           resultis 'RTAP'
          case RTRN:           resultis 'RTRN'
          case RES:            resultis 'RES'
          case RSTACK:         resultis 'RSTACK'
          case FINISH:         resultis 'FINISH'

          case SWITCHON:       resultis 'SWITCHON'
          case GLOBAL:         resultis 'GLOBAL'
          case DATALAB:        resultis 'DATALAB'
          case ITEMN:          resultis 'ITEMN'
          case ITEML:          resultis 'ITEML'     $)   $)

       WriteS(S)      $)1
